# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: SCP
- Location: C:\Users\Tecdata\Desktop\IntegrationScripts\Star\SCP.spec.ts:5:5

# Error details

```
TimeoutError: locator.click: Timeout 40000ms exceeded.
Call log:
  - waiting for getByRole('button', { name: 'Copy Link' })

    at C:\Users\Tecdata\Desktop\IntegrationScripts\Star\SCP.spec.ts:191:24
```

# Page snapshot

```yaml
- link "vizza-logo":
  - img "vizza-logo"
- link "Home"
- link "About us"
- link "Event"
- link "Contact us"
- link "Careers"
- link "Online Insurance"
- link "Two Wheeler Insurance"
- link "Private Car Insurance"
- link "New India Insurance"
- link "Commercial Insurance"
- link "Dental Insurance"
- link "Health Insurance"
- link "Personal Accident"
- link "Travel Insurance"
- link "Star Travel Insurance"
- link "Life Insurance"
- link "Life-POS"
- link "Bajaj Goal Suraksha"
- link "Edelweiss"
- link "Life Insurance"
- link "Life Insurance-Term"
- link "Life Insurance-Endowment"
- link "ULIP"
- link "General Insurance"
- link "Commercial Insurance"
- link "Jewelers Block Policy"
- link "Bankers Indemnity Policy"
- link "Shopkeepers Policy"
- link "Marine Cargo Policy"
- link "Contractor Machinery Policy"
- link "Marine Hull Policy"
- link "Aviation Insurance"
- link "Money Insurance"
- link "House Holder Policy"
- link "Industrial Insurance"
- link "Fire Policy"
- link "Burglary Policy"
- link "Machinery Breakdown Policy"
- link "Electronics Equipment Policy"
- link "Consequential Loss Policy"
- link "Contractors All Risk Policy"
- link "Marine cum Erection/ Storage Policy"
- link "Advance Loss of Profit"
- link "Contractor Plant and Machinery Policy"
- link "Mega Package Policy"
- link "Erection All Risk Policy"
- link "Liability Insurance"
- link "Public Liability Policy"
- link "Products Liability Policy"
- link "Professional Indemnity Policy"
- link "Directors and Officers Liability Policy"
- link "Lift Insurance"
- link "Employers Liability Policy"
- link "Workmen Compensation"
- link "Carriers Liability Policy"
- link "Liability Insurance Act Policy"
- link "Golfers Indemnity Policy"
- link "Fidelity Guarantee Insurance Policy"
- link "Group Insurance"
- link "Group Medical Insurance"
- link "Group Personal Accident"
- link "Group Term Life Insurance"
- link "Group Travel Insurance"
- link "Renewal"
- link "Renewal Reminder"
- link "Renew Existing Policy"
- link "Health Insurance Renewal"
- link "Health Landing"
- link "Motor Landing"
- link "Claim Assistance"
- link "Media Library"
- link "Learning Center"
- link "Training"
- link "Mock Test"
- link "Mock Campus Test"
- link "Mock BQP Test"
- link "Media Library"
- link "FAQ"
- link "Insurance Dictionary"
- link "POS"
- link "Policy Login"
- link "Blogs"
- paragraph: Hi, BHUVANESWARI A
- button
- button
- tablist:
  - tab "PROPOSER DETAILS"
  - tab "INSURED DETAILS"
  - tab "3 NOMINEE DETAILS" [selected]
  - tab "4 SUMMARY"
  - tabpanel "3 NOMINEE DETAILS":
    - button "NOMINEE DETAILS" [expanded]
    - region "NOMINEE DETAILS":
      - heading "NOMINEE DETAILS" [level=6]
      - text: Name of Nominee*
      - textbox: Nominee
      - text: Age*
      - textbox: "25"
      - text: Relationship with Proposer*
      - combobox "Sister"
      - text: "% Of the Claim*"
      - textbox: "100"
      - button "Back"
      - button "Next"
- heading "Summary" [level=3]
- img "Care Health"
- text: "Star Health - Star Comprehensive Family Cover: ₹ 500000 Yearly ₹ 13280 Total premium (incl. GST) ₹ 13280"
- paragraph: Contact
- link "Whatsapp":
  - paragraph:
    - img
    - text: Whatsapp
- paragraph: Chat Bot
```

# Test source

```ts
   91 |   await page.getByText('Chennai').click();
   92 |   await page.waitForTimeout(2000);
   93 |   await page.getByLabel('1PROPOSER DETAILS').getByLabel('Area *').getByText('Area').click();
   94 |   await page.getByText('Perambur Barracks').click();
   95 |
   96 |   const currentDate = new Date();
   97 |   const formattedDate = `${currentDate.getDate()}/${currentDate.getMonth() + 1}/${currentDate.getFullYear()}`;
   98 |
   99 |   await page.locator('#mat-input-51').type(formattedDate);
  100 |
  101 |   // const startDateInput = page.locator('#mat-input-51');  // Replace with actual selector
  102 |   //   const policyEndDateInput = page.locator('#mat-input-52'); // Replace with actual selector
  103 |
  104 |   //   // Get today's date in "dd/MM/yyyy" format
  105 |   //   const today = new Date();
  106 |   //   const formattedToday = today.toLocaleDateString('en-GB').split('/').join('/');
  107 |
  108 |   //   // Enter today's date as start date
  109 |   //   await startDateInput.fill(formattedToday);
  110 |
  111 |   //   // Wait for the policy end date field to be populated
  112 |   //   await expect(policyEndDateInput).toHaveAttribute('value', /.*/);
  113 |
  114 |   //   // Get the actual start and end dates from the UI
  115 |   //   const policyStartDate = await startDateInput.inputValue();
  116 |   //   const policyEndDate = await policyEndDateInput.inputValue();
  117 |
  118 |   //   // Calculate the expected policy start date (yesterday’s date)
  119 |   //   const expectedStartDate = new Date(today);
  120 |   //   expectedStartDate.setDate(expectedStartDate.getDate() - 1); // Subtract 1 day
  121 |   //   const formattedExpectedStartDate = expectedStartDate.toLocaleDateString('en-GB').split('/').join('/');
  122 |
  123 |   //   // Debugging logs
  124 |   //   console.log('Expected Start Date:', formattedExpectedStartDate);
  125 |   //   console.log('Actual Policy Start Date:', policyStartDate);
  126 |
  127 |   //   // Assertion
  128 |   //   expect(policyStartDate).toEqual(formattedExpectedStartDate);
  129 |
  130 |   await page.waitForTimeout(2000);
  131 |   await page.locator('span.mat-button-wrapper:has-text("Next")').nth(0).click();
  132 |   // Fix radio button click by using the label instead of the circle
  133 |   await page.locator('#mat-radio-100').getByText('No').click();
  134 |   
  135 |   await page.getByRole('textbox', { name: 'PAN Number' }).fill('gjkpm0846p');
  136 |   await page.getByRole('button', { name: 'Submit' }).click();
  137 |  
  138 |   // Mobile-specific file upload handling
  139 |   const imagePath = path.join(__dirname, '../assets/Arunkumar.jpg');
  140 |   
  141 |   // Enhanced file upload for mobile
  142 |   for (let i = 0; i < 3; i++) {
  143 |     const fileInput = await page.locator('input[type="file"]').nth(i);
  144 |     // if (isMobile) await fileInput.scrollIntoViewIfNeeded();
  145 |     await fileInput.setInputFiles(imagePath);
  146 |     await page.waitForTimeout(2000); // Extended wait for mobile upload
  147 |   }
  148 |
  149 |   // await page.locator('#mat-checkbox-17').click();
  150 |
  151 |   // Mobile-specific checkbox handling
  152 |   const checkbox = page.locator('#mat-checkbox-17');
  153 |   if (isMobile) await checkbox.scrollIntoViewIfNeeded();
  154 |   await checkbox.click();
  155 |
  156 |   await page.locator('span.mat-button-wrapper:has-text("Submit")').click();
  157 |
  158 |   await page.getByLabel('2INSURED DETAILS').getByText('Same as proposer').click();
  159 |   await page.getByRole('textbox', { name: 'Height(cms)' }).type('170');
  160 |   await page.getByRole('textbox', { name: 'Weight(kgs)' }).type('70');
  161 |   await page.locator('#mat-radio-30 > .mat-radio-label > .mat-radio-container > .mat-radio-outer-circle').click();
  162 |   // await page.getByRole('button', { name: '1.INSURED DETAILS' }).click();
  163 |   await page.waitForTimeout(4000);
  164 |   await page.getByRole('button', { name: '2.INSURED DETAILS' }).click();
  165 |   await page.waitForTimeout(2000);
  166 |   await page.getByRole('textbox', { name: 'Name', exact: true }).type('test h');
  167 |   await page.getByRole('region', { name: '2.INSURED DETAILS' }).getByLabel('DOB (DD/MM/YYYY) *').type('09121999');
  168 |   await page.getByRole('combobox', { name: 'Gender Gender' }).locator('span').click();
  169 |   await page.getByRole('option', { name: 'Female' }).locator('span').click();
  170 |   await page.getByRole('textbox', { name: 'Height(cms)' }).type('160');
  171 |   await page.getByRole('textbox', { name: 'Weight(kgs)' }).type('60');
  172 |   await page.getByRole('combobox', { name: 'Occupation Occupation' }).locator('span').click();
  173 |   await page.getByText('Housewives').click();
  174 |   await page.getByLabel('2INSURED DETAILS').getByText('Relationship with ProposerRelationship with Proposer *').click();
  175 |   await page.getByText('SPOUSE', { exact: true }).click();
  176 |   await page.getByLabel('2INSURED DETAILS').getByRole('button', { name: 'Next' }).click();
  177 |
  178 |   await page.locator('#mat-input-80').fill('Nominee');
  179 |   await page.locator('#mat-input-81').fill('25');
  180 |   await page.getByLabel('3NOMINEE DETAILS').getByLabel('', { exact: true }).locator('span').click();
  181 |   await page.getByText('Sister').click();
  182 |   await page.locator('#mat-input-82').fill('100');
  183 |   await page.waitForTimeout(10000);
  184 |   await page.getByLabel('3NOMINEE DETAILS').getByRole('button', { name: 'Next' }).click();
  185 |   await page.waitForTimeout(2000);
  186 |   
  187 |   // Add small delay before next actions
  188 |   await page.waitForTimeout(2000);
  189 |   const copyLinkButton = page.getByRole('button', { name: 'Copy Link' });
  190 |   if (isMobile) await copyLinkButton.scrollIntoViewIfNeeded();
> 191 |   await copyLinkButton.click();
      |                        ^ TimeoutError: locator.click: Timeout 40000ms exceeded.
  192 |   
  193 |   const payButton = page.getByRole('button', { name: 'Pay by Customer' });
  194 |   if (isMobile) await payButton.scrollIntoViewIfNeeded();
  195 |   await payButton.click();
  196 | });
  197 |
```