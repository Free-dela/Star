# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: SWC
- Location: C:\Users\Tecdata\Desktop\IntegrationScripts\Star\SWC.spec.ts:5:6

# Error details

```
Error: locator.click: Target page, context or browser has been closed
Call log:
  - waiting for locator('#mat-radio-33-input')
    - locator resolved to <input value="1" required="" type="radio" tabindex="0" id="mat-radio-33-input" name="mat-radio-group-31" class="mat-radio-input cdk-visually-hidden"/>
  - attempting click action
    - waiting for element to be visible, enabled and stable
    - element is visible, enabled and stable
    - scrolling into view if needed
    - done scrolling
    - <mat-radio-button value="1" tabindex="-1" id="mat-radio-33" class="mat-radio-button mr-3 mat-accent">…</mat-radio-button> intercepts pointer events
  - retrying click action
    - waiting for element to be visible, enabled and stable
    - element is visible, enabled and stable
    - scrolling into view if needed
    - done scrolling
    - <button type="button" class="btn btn-lg btn-block">…</button> from <div class="d-block d-sm-block d-md-block d-lg-none d-xl-none sticky container">…</div> subtree intercepts pointer events
  - retrying click action
    - waiting 20ms
    2 × waiting for element to be visible, enabled and stable
      - element is visible, enabled and stable
      - scrolling into view if needed
      - done scrolling
      - <mat-radio-button value="1" tabindex="-1" id="mat-radio-33" class="mat-radio-button mr-3 mat-accent">…</mat-radio-button> intercepts pointer events
    - retrying click action
      - waiting 100ms
    2 × waiting for element to be visible, enabled and stable
      - element is visible, enabled and stable
      - scrolling into view if needed
      - done scrolling
      - <mat-radio-button value="1" tabindex="-1" id="mat-radio-33" class="mat-radio-button mr-3 mat-accent">…</mat-radio-button> intercepts pointer events
    - retrying click action
      - waiting 500ms
      - waiting for element to be visible, enabled and stable
      - element is visible, enabled and stable
      - scrolling into view if needed
      - done scrolling
      - <button type="button" class="btn btn-lg btn-block">…</button> from <div class="d-block d-sm-block d-md-block d-lg-none d-xl-none sticky container">…</div> subtree intercepts pointer events
    - retrying click action
      - waiting 500ms
      - waiting for element to be visible, enabled and stable
      - element is visible, enabled and stable
      - scrolling into view if needed
      - done scrolling
      - <mat-radio-button value="1" tabindex="-1" id="mat-radio-33" class="mat-radio-button mr-3 mat-accent">…</mat-radio-button> intercepts pointer events
    - retrying click action
      - waiting 500ms
      - waiting for element to be visible, enabled and stable
      - element is visible, enabled and stable
      - scrolling into view if needed
      - done scrolling
      - <mat-radio-button value="1" tabindex="-1" id="mat-radio-33" class="mat-radio-button mr-3 mat-accent">…</mat-radio-button> intercepts pointer events
    - retrying click action
      - waiting 500ms
    - waiting for element to be visible, enabled and stable
    - element is visible, enabled and stable
    - scrolling into view if needed
    - done scrolling
    - <mat-radio-button value="1" tabindex="-1" id="mat-radio-33" class="mat-radio-button mr-3 mat-accent">…</mat-radio-button> intercepts pointer events
  - retrying click action
    - waiting 500ms
    - waiting for element to be visible, enabled and stable
    - element is visible, enabled and stable
    - scrolling into view if needed
    - done scrolling
    - <button type="button" class="btn btn-lg btn-block">…</button> from <div class="d-block d-sm-block d-md-block d-lg-none d-xl-none sticky container">…</div> subtree intercepts pointer events
  - retrying click action
    - waiting 500ms
    - waiting for element to be visible, enabled and stable
    - element is visible, enabled and stable
    - scrolling into view if needed
    - done scrolling
    - <mat-radio-button value="1" tabindex="-1" id="mat-radio-33" class="mat-radio-button mr-3 mat-accent">…</mat-radio-button> intercepts pointer events
  - retrying click action
    - waiting 500ms

    at C:\Users\Tecdata\Desktop\IntegrationScripts\Star\SWC.spec.ts:131:47
```

# Test source

```ts
   31 |
   32 |     } else {
   33 |         await page.waitForTimeout(2000); 
   34 |         await page.locator('span.horizontal-menu-title:has-text("Online Insurance")').hover();
   35 |         await page.waitForTimeout(1000);
   36 |         await page.locator('span.horizontal-menu-title:has-text("Online Insurance")').click();
   37 |         await page.getByRole('link', { name: 'Health Insurance', exact: true }).click();
   38 |         await page.waitForTimeout(3000);
   39 |
   40 |     await page.getByRole('textbox', { name: 'Name' }).type('test ');
   41 |     await page.getByRole('textbox', { name: 'Email' }).type('freedela0912@gmail.com');
   42 |     await page.getByRole('textbox', { name: 'Mobile Number' }).click();
   43 |     await page.getByRole('textbox', { name: 'Mobile Number' }).fill('8531913069');
   44 |     await page.getByRole('button', { name: 'Next' }).click();
   45 |     await page.locator('#mat-input-17').type('25');
   46 |     await page.locator('#mat-input-19').type('25');
   47 |     await page.getByRole('textbox', { name: 'PIN CODE' }).type('600012');
   48 |     await page.getByRole('button', { name: 'Proceed' }).click();
   49 |     await page.getByRole('button', { name: '₹ 14904/Yr' }).click();
   50 |
   51 |     }
   52 |     // Enhanced mobile-specific element handling for dropdowns
   53 |     if (isMobile) {
   54 |         await page.evaluate(() => window.scrollTo(0, 0)); // Scroll to top for better dropdown visibility
   55 |       }
   56 |       
   57 |      await page.waitForTimeout(5000);
   58 |       await page.getByRole('combobox', { name: 'Title Title' }).locator('span').click();
   59 |       await page.getByText('Mr', { exact: true }).click();
   60 |
   61 |     // Add verification that selection was successful
   62 |     await page.getByRole('textbox', { name: 'First Name' }).type('Test');
   63 |     await page.getByRole('textbox', { name: 'Last Name' }).type('W');
   64 |     await page.getByLabel('1PROPOSER DETAILS').getByText('OccupationOccupation *').click();
   65 |     await page.getByText('PROFESSIONAL-ENGINEER').click();
   66 |     await page.getByRole('tabpanel', { name: 'PROPOSER DETAILS' }).getByLabel('DOB (DD/MM/YYYY) *').fill('09121999');
   67 |     await page.getByLabel('1PROPOSER DETAILS').locator('div').filter({ hasText: /^Email ID \*$/ }).nth(3).click();
   68 |     await page.getByRole('textbox', { name: 'Email ID' }).fill('freedela0912@gmail.com');
   69 |     await page.getByRole('textbox', { name: 'Mobile Number' }).type('8531913069');
   70 |     await page.getByRole('tabpanel', { name: 'PROPOSER DETAILS' }).getByLabel('Address 1 *').type('2A');
   71 |     await page.getByRole('tabpanel', { name: 'PROPOSER DETAILS' }).getByLabel('Address 2 *').type('Star Assure');
   72 |     await page.getByRole('tabpanel', { name: 'PROPOSER DETAILS' }).getByLabel('Pincode *').type('600012');
   73 |     await page.waitForTimeout(4000);
   74 |     await page.getByLabel('1PROPOSER DETAILS').getByLabel('City *').getByText('City').click();
   75 |     await page.getByText('Chennai').click();
   76 |     await page.waitForTimeout(4000);
   77 |     await page.getByLabel('1PROPOSER DETAILS').getByLabel('Area *').getByText('Area').click();
   78 |     await page.getByText('Perambur Barracks').click();
   79 |
   80 |     const currentDate = new Date();
   81 |     const formattedDate = `${currentDate.getDate()}/${currentDate.getMonth() + 1}/${currentDate.getFullYear()}`;
   82 |
   83 |     await page.locator('#mat-input-51').type(formattedDate);
   84 |     await page.waitForTimeout(2000);
   85 |
   86 |     await page.locator('span.mat-button-wrapper:has-text("Next")').nth(0).click();
   87 |     
   88 |     await page.waitForTimeout(2000);
   89 |     await page.locator('#mat-radio-64').click();
   90 |     
   91 |     await page.getByRole('textbox', { name: 'PAN Number' }).fill('gjkpm0846p');
   92 |     await page.getByRole('button', { name: 'Submit' }).click();
   93 |   
   94 |     const imagePath = path.join(__dirname, '../assets/Arunkumar.jpg');
   95 |     
   96 |     // Enhanced file upload for mobile
   97 |     for (let i = 0; i < 3; i++) {
   98 |         const fileInput = await page.locator('input[type="file"]').nth(i);
   99 |         // if (isMobile) await fileInput.scrollIntoViewIfNeeded();
  100 |         await fileInput.setInputFiles(imagePath);
  101 |         await page.waitForTimeout(isMobile ? 2000 : 1000);
  102 |     }
  103 |
  104 |     // Mobile-specific checkbox handling
  105 |     const checkbox = page.locator('#mat-checkbox-17');
  106 |     if (isMobile) await checkbox.scrollIntoViewIfNeeded();
  107 |     await checkbox.click();
  108 |     
  109 |     await page.waitForTimeout(2000);
  110 |     await page.locator('span.mat-button-wrapper:has-text("Submit")').click();
  111 |
  112 |     await page.getByLabel('2INSURED DETAILS').getByText('Same as proposer').click();
  113 |     await page.getByRole('textbox', { name: 'Height(cms)' }).type('170');
  114 |     await page.getByRole('textbox', { name: 'Weight(kgs)' }).type('70');
  115 |
  116 | await page.waitForTimeout(2000);
  117 | await page.getByRole('button', { name: '2.INSURED DETAILS' }).click();
  118 |  await page.waitForTimeout(2000);
  119 |
  120 |     await page.getByRole('textbox', { name: 'Name', exact: true }).type('test w');
  121 |     await page.getByRole('region', { name: '2.INSURED DETAILS' }).getByLabel('DOB (DD/MM/YYYY) *').type('09121999');
  122 |     await page.getByLabel('2INSURED DETAILS').getByText('GenderGender *').click();
  123 |     await page.getByText('Female').click();
  124 |     await page.getByRole('textbox', { name: 'Height(cms)' }).type('160');
  125 |     await page.getByRole('textbox', { name: 'Weight(kgs)' }).type('60');
  126 |     await page.getByRole('combobox', { name: 'Occupation Occupation' }).locator('span').click();
  127 |     await page.getByText('Housewives').click();
  128 |     await page.getByRole('combobox', { name: 'Relationship with Proposer' }).locator('span').click();
  129 |     await page.getByText('SPOUSE', { exact: true }).click();
  130 |     await page.waitForTimeout(2000);
> 131 |     await page.locator("#mat-radio-33-input").click();
      |                                               ^ Error: locator.click: Target page, context or browser has been closed
  132 |     // await page.locator('#mat-radio-33 > .mat-radio-label > .mat-radio-container > .mat-radio-outer-circle').click();
  133 |     await page.getByRole('textbox', { name: 'Pregnancy Due Date (DD/MM/' }).click();
  134 |     await page.getByRole('textbox', { name: 'Pregnancy Due Date (DD/MM/' }).fill('09/07/2025');
  135 |     await page.getByLabel('2INSURED DETAILS').getByRole('button', { name: 'Next' }).click();
  136 |    
  137 |     await page.locator('#mat-input-80').fill('Nominee');
  138 |     await page.locator('#mat-input-81').fill('25');
  139 |     await page.getByLabel('3NOMINEE DETAILS').getByLabel('', { exact: true }).locator('span').click();
  140 |     await page.getByText('Sister').click();
  141 |     await page.getByLabel('3NOMINEE DETAILS').locator('div').filter({ hasText: /^% Of the Claim$/ }).nth(3).click();
  142 |     await page.locator('#mat-input-82').fill('100');
  143 |     await page.waitForTimeout(7000);
  144 |     await page.getByLabel('3NOMINEE DETAILS').getByRole('button', { name: 'Next' }).click();
  145 |     
  146 |     await page.waitForTimeout(2000);
  147 |     
  148 |     // Mobile-specific button handling for final submission
  149 |     const copyLinkButton = page.getByRole('button', { name: 'Copy Link' });
  150 |     if (isMobile) await copyLinkButton.scrollIntoViewIfNeeded();
  151 |     await copyLinkButton.click();
  152 |     
  153 |     const payButton = page.getByRole('button', { name: 'Pay by Customer' });
  154 |     if (isMobile) await payButton.scrollIntoViewIfNeeded();
  155 |     await payButton.click();
  156 | });
  157 |
```